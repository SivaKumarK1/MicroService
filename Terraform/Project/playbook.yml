---
  - name: Install and set up Postgres 14 in Ubuntu 20.04
    hosts: postgresql
    become: yes
    gather_facts: False
    remote_user: ubuntu
    vars:
      postgres_root_user: postgres
      postgres_root_pass: postgres
      allow_world_readable_tmpfiles: true
    tasks:
      - name: Update apt repo and cache on all Ubuntu boxes
        apt:
          update_cache: yes
          force_apt_get: yes
          cache_valid_time: 3600

      - name: Upgrade all packages on servers
        apt:
          upgrade: dist
          force_apt_get: yes

      - name: Install required packages
        apt:
          name:
            - wget
            - python3-psycopg2
            - acl
          state: latest

      - name: Set up Postgres 14 repo
        shell: |
          echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        args:
          warn: no

      - name: Install postgresql
        apt:
          name: postgresql-14
          update_cache: yes
        notify:
          - Enable Postgresql

      - name: Ensure PostgreSQL is listening on *
        lineinfile:
          dest: /etc/postgresql/14/main/postgresql.conf
          regexp: '^listen_addresses\s*='
          line: "listen_addresses='*'"
          state: present
        notify: Restart Postgresql

      - name: Add new configuration to "pg_hba.conf"
        blockinfile:
          dest: /etc/postgresql/14/main/pg_hba.conf
          block: |
            host    all             all             0.0.0.0/0                md5
            host    all             all             ::/0                     md5
        notify: Restart Postgresql

      - name: Change peer identification to trust
        shell: /bin/sed -i '/^local/s/peer/trust/' /etc/postgresql/14/main/pg_hba.conf
        args:
          warn: no
        notify: Restart Postgresql

      - name: Create a Superuser PostgreSQL database user
        become: yes
        become_user: postgres
        postgresql_user:
          name: '{{ postgres_root_user }}'
          password: '{{ postgres_root_pass }}'
          role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE
          encrypted: yes
          state: present

    handlers:
      - name: Restart Postgresql
        systemd:
          name: postgresql
          state: restarted

      - name: Start Postgresql
        systemd:
          name: postgresql
          state: started

      - name: Stop Postgresql
        systemd:
          name: postgresql
          state: stopped

      - name: Enable Postgresql
        systemd:
          name: postgresql
          enabled: yes
# Swarm setup
  - name: Init Swarm Master
    hosts: masters
    become: true
    gather_facts: False
    remote_user: ubuntu
    tasks:
      # - name: Swarm Leave
      #   command: sudo docker swarm leave
      #   ignore_errors: yes
      - copy:
          src: ./docker-compose-swarm.yml
          dest: ./docker-compose-swarm.yml
      - name: Swarm Init
        command: sudo usermod -aG docker {{remote_user}}
        command: docker swarm init --advertise-addr {{ inventory_hostname }}

      - name: Run Docker Stack Deploy
        command: docker stack deploy -c docker-compose-swarm.yml docker_swarm_app
        
      - name: Get Worker Token
        command: docker swarm join-token worker -q
        register: worker_token

      - name: Show Worker Token
        debug: var=worker_token.stdout

      - name: Master Token
        command: docker swarm join-token manager -q
        register: master_token

      - name: Show Master Token
        debug: var=master_token.stdout
      

  - name: Join Swarm Cluster
    hosts: workers
    become: true
    remote_user: ubuntu
    gather_facts: False
    vars:
      token: "{{ hostvars[groups['masters'][0]]['worker_token']['stdout'] }}"
      master: "{{ hostvars[groups['masters'][0]]['inventory_hostname'] }}"
    tasks:
      - name: Swarm Leave
        command: sudo docker swarm leave
        ignore_errors: yes

      - name: Join Swarm Cluster as a Worker
        command: sudo usermod -aG docker {{remote_user}}
        command: sudo docker swarm join --token {{ token }} {{ master }}:2377
        register: worker

      - name: Show Results
        debug: var=worker.stdout

      - name: Show Errors
        debug: var=worker.stderr


  